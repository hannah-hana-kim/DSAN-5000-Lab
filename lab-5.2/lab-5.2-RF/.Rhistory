# ag_major <- ag_major[, "ag.mode_name", drop = FALSE]
#
# table(kc_major)
# table(ag_major)
hist(kc_major$kc.mode_name)
barplot(prop.table(table(kc_major)))
barplot(prop.table(table(kc_major$kc.mode_name)))
barplot(prop.table(table(ag_major$ag.mode_name)))
ggplot(data.frame(kc_major), aes(x=kc.mode_name)) +
geom_bar()
ggplot(data.frame(kc_major), aes(x=kc.mode_name)) +
geom_bar()
ggplot(data.frame(ag_major), aes(x=ag.mode_name)) +
geom_bar()
kc_major <- kc[kc$kc.mode_name=='major',]
ag_major <- ag[ag$ag.mode_name=='major',]
# kc_major <- kc_major[, "kc.mode_name", drop = FALSE]
# ag_major <- ag_major[, "ag.mode_name", drop = FALSE]
#
# table(kc_major)
# table(ag_major)
df <- data.frame(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
ag_major <- ag[ag$ag.mode_name=='major',]
# kc_major <- kc_major[, "kc.mode_name", drop = FALSE]
# ag_major <- ag_major[, "ag.mode_name", drop = FALSE]
#
# table(kc_major)
# table(ag_major)
df <- rbind(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
kc_major <- data.frame(kc_major)
ag_major <- ag[ag$ag.mode_name=='major',]
ag_major <- data.frame(ag_major)
df <- rbind(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
kc_major <- data.frame(kc_major)
ag_major <- ag[ag$ag.mode_name=='major',]
ag_major <- data.frame(ag_major)
kc_major$source <- "kc"
ag_major$source <- "ag"
df <- rbind(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
kc_major <- data.frame(kc_major)
ag_major <- ag[ag$ag.mode_name=='major',]
ag_major <- data.frame(ag_major)
kc_major$source <- "kc"
ag_major$source <- "ag"
df <- cbind(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
kc_major <- data.frame(kc_major)
ag_major <- ag[ag$ag.mode_name=='major',]
ag_major <- data.frame(ag_major)
kc_major$source <- "kc.mode_name"
ag_major$source <- "ag.mode_name"
df <- rbind(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
kc_major <- data.frame(kc_major)
ag_major <- ag[ag$ag.mode_name=='major',]
ag_major <- data.frame(ag_major)
kc_major$mode_name <- "kc.mode_name"
ag_major$mode_name <- "ag.mode_name"
df <- rbind(kc_major, ag_major)
kc_major <- kc[kc$kc.mode_name=='major',]
ag_major <- ag[ag$ag.mode_name=='major',]
kc_major
ag_major
kc_major <- kc[kc$kc.mode_name=='major',]
ag_major <- ag[ag$ag.mode_name=='major',]
kc_major$kc.mode_name
ag_major$ag.mode_name
kc_major <- kc[kc$kc.mode_name=='major',]
ag_major <- ag[ag$ag.mode_name=='major',]
kc_major_mode <- kc_major$kc.mode_name
ag_major_mode <- ag_major$ag.mode_name
kc_major_mode
ag_major_mode
type(kc_major_mode)
typeof(kc_major_mode)
typeof(ag_major_mode)
kc_major_mode <- data.frame(kc_major_mode)
ag_major_mdoe <- data.frame(ag_major_mode)
typeof(kc_major_mode)
kc_major_mode <- as.data.frame(kc_major_mode)
ag_major_mdoe <- as.data.frame(ag_major_mode)
typeof(kc_major_mode)
kc_major_mode <- as.data.frame(mode = kc_major_mode)
kc_major <- kc[kc$kc.mode_name=='major',]
ag_major <- ag[ag$ag.mode_name=='major',]
kc_major_mode <- kc_major$kc.mode_name
ag_major_mode <- ag_major$ag.mode_name
kc_major_mode <- as.data.frame(kc_major_mode)
ag_major_mdoe <- as.data.frame(ag_major_mode)
str(kc_major_mode)
str(kc_major_mode)
str(ag_major_mode)
table <- table(kc_major_mode, ag_major_mode)
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Dataset1 = as.numeric(table_1),
Dataset2 = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
# Plot side-by-side bar plots for both datasets
library(ggplot2)
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of Categorical Data", x = "Category", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of both singers", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of both singers", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of both singers", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_boxplot() +
labs(title = "Comparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_violin(trim = FALSE) +
labs(title = "Comparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
facet_wrap(~Dataset) +
labs(title = "omparison of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
facet_wrap(~Dataset) +
labs(title = "Bar Graph with Facet Wrap of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
table_1 <- table(kc_major_mode)
table_2 <- table(ag_major_mode)
combined_data <- data.frame(Category = factor(names(table_1)),
Kelly_Clarkson = as.numeric(table_1),
Arianna_Grande = as.numeric(table_2))
library(tidyr)
combined_data_long <- pivot_longer(combined_data, cols = -Category, names_to = "Dataset", values_to = "Frequency")
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Bar Graph of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Major Mode", y = "Frequency") +
theme_minimal()
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
labs(title = "Comparison of Categorical Data", x = "Category", y = "Frequency") +
theme_minimal()
ggplot(combined_data_long, aes(x = Category, y = Frequency, fill = Dataset)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
labs(title = "Stacked Bar Plot of the major modes songs of Arianna Grande and Kelly Clarkson", x = "Category", y = "Frequency") +
theme_minimal()
ts_speechiness <- artists$speechiness[artists$artist_name == "Taylor Swift"]
jl_speechiness <- artists$speechiness[artists$artist_name == "John Legend"]
t_test_result <- t.test(taylor_swift_speechiness, john_legend_speechiness, alternative = "greater")
ts_speechiness <- artists$speechiness[artists$artist_name == "Taylor Swift"]
jl_speechiness <- artists$speechiness[artists$artist_name == "John Legend"]
t_test_result <- t.test(ts_speechiness, jl_speechiness, alternative = "greater")
t_test_result
# kc_major <- kc[kc$kc.mode_name=='major',]
# ag_major <- ag[ag$ag.mode_name=='major',]
#
# kc_major_mode <- kc_major$kc.mode_name
# ag_major_mode <- ag_major$ag.mode_name
#
# kc_major_mode <- as.data.frame(kc_major_mode)
# ag_major_mdoe <- as.data.frame(ag_major_mode)
#
# str(kc_major_mode)
# str(ag_major_mode)
kc <- read_csv('./Kelly_Clarkson.csv')
ag <- read_csv('./Arianna_Grande.csv')
library(tidyverse)
library(ggplot2)
kc <- read_csv('./Kelly_Clarkson.csv')
ag <- read_csv('./Arianna_Grande.csv')
# histogram
hist(kc$kc.tempo)
hist(kc$kc.tempo)
hist(ag$ag.tempo)
kc <- read_csv('./Kelly_Clarkson.csv')
ag <- read_csv('./Arianna_Grande.csv')
kc
ag
library(tidyverse)
library(ggplot2)
kc <- read_csv('./Kelly_Clarkson.csv')
ag <- read_csv('./Arianna_Grande.csv')
kc
ag
# histogram
hist(kc$kc.tempo)
hist(ag$ag.tempo)
# boxplot
kc %>%
ggplot(aes(x = artist_name, y = kc.tempo)) +
geom_boxplot() +ggtitle("Tempo of the songs from Kelly Clarkson")
# histogram
hist(kc$kc.tempo)
hist(ag$ag.tempo)
# boxplot
kc %>%
ggplot(aes(x = kc.artist_name, y = kc.tempo)) +
geom_boxplot() +ggtitle("Tempo of the songs from Kelly Clarkson")
ag %>%
ggplot(aes(x = ag.artist_name, y = ag.tempo)) +
geom_boxplot() +ggtitle("Tempo of the songs from Arianna Grande")
# density plot
kc_tempo<- density(kc$kc.tempo)
plot(kc_tempo, frame = FALSE, col = "blue",main = "Density plot of Kelly Clarkson's song tempo")
ag_tempo<- density(ag$ag.tempo)
plot(ag_tempo, frame = FALSE, col = "blue",main = "Density plot of Arianna Grande's song tempo")
# QQ plot
qqnorm(kc$kc.tempo)
qqline(kc$kc.tempo)
qqnorm(ag$ag.tempo)
qqline(ag$ag.tempo)
ratio <- mean(ts_speechiness) / mean(jl_speechiness)
# histogram
taylor <- artists[artists$artist_name=='Taylor Swift',]
artists <- read_csv('Artists.csv')
head(artists)
# histogram
taylor <- artists[artists$artist_name=='Taylor Swift',]
hist(taylor$speechiness, main = 'Speechiness of Taylor Swift')
legend <- artists[artists$artist_name=='John Legend',]
hist(legend$speechiness, main = 'Speechiness of John Legend')
# boxplot
artists %>%
ggplot( aes(x = artist_name, y = speechiness)) +
geom_boxplot() +ggtitle("Speechiness of the artists")
# density plot
t_speechiness<- density(taylor$speechiness)
plot(t_speechiness, frame = FALSE, col = "blue",main = "Density plot of Taylor Swift Speechiness")
j_speechiness<- density(legend$speechiness)
plot(j_speechiness, frame = FALSE, col = "blue",main = "Density plot of John Legend Speechiness")
# QQ plot
qqnorm(taylor$speechiness)
qqline(taylor$speechiness)
qqnorm(legend$speechiness)
qqline(legend$speechiness)
ts_speechiness <- artists$speechiness[artists$artist_name == "Taylor Swift"]
jl_speechiness <- artists$speechiness[artists$artist_name == "John Legend"]
t_test_result <- t.test(ts_speechiness, jl_speechiness, alternative = "greater")
t_test_result
ratio <- mean(ts_speechiness) / mean(jl_speechiness)
ratio
bootstrap <- function(ts, jl, n = 1000) {
ratios <- numeric(n)
for (i in 1:n) {
sample1 <- sample(ts, replace = TRUE)
sample2 <- sample(jl, replace = TRUE)
ratios[i] <- mean(sample1) / mean(sample2)
}
return(ratios)
}
set.seed(123)
bootstrap_ratio <- bootstrap(ts_speechiness, jl_speechiness)
# 95% bootstrap interval
bootstrap_interval <- quantile(bootstrap_ratios, c(0.025, 0.975))
bootstrap <- function(ts, jl, n = 1000) {
ratios <- numeric(n)
for (i in 1:n) {
sample1 <- sample(ts, replace = TRUE)
sample2 <- sample(jl, replace = TRUE)
ratios[i] <- mean(sample1) / mean(sample2)
}
return(ratios)
}
set.seed(123)
bootstrap_ratio <- bootstrap(ts_speechiness, jl_speechiness)
# 95% bootstrap interval
bootstrap_interval <- quantile(bootstrap_ratio, c(0.025, 0.975))
bootstrap_interval
bias <- mean(bootstrap_ratio) - ratio
bias
View(artists)
View(artists)
artists$Valence_C <- "moderate"
artists$Valence_C[artists$Valence >= 0.8,] <- "more positive"
artists$Valence_C <- "moderate"
artists$Valence_C[artists$Valence >= 0.8] <- "more positive"
artists$Valence_C[artists$Valence >= 0.79 & artists$Valence <= 0.5] <- "moderate"
artists$Valence_C[artists$Valence < 0.5] <- "more negative"
head(artists)
head(artists$Valence, artists$Valence_C)
head(artists[Valence,Valence_C])
head(artists[artists$Valence,artists$Valence_C])
head(artists[artists$Valence,artists$Valence_C,])
head(artists[c("Valence","Valence_C")])
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
by_valence_c <- artists$Valence_C[artists$artist_name == "Beyonce"]
# t-test is a method for comparing two groups. In this test, I will perform the t-test between Taylor Swift and John Legend for example.
# t-test for Taylor Swift and Beyonce
t_test_result_v <- t.test(ts_valence_c, by_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
by_valence_c <- artists$Valence_C[artists$artist_name == "Beyonce"]
# t-test is a method for comparing two groups. In this test, I will perform the t-test between Taylor Swift and John Legend for example.
# t-test for Taylor Swift and Beyonce
t_test_result_v <- t.test(ts_valence_c, by_valence_c, alternative='greater')
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
by_valence_c <- artists$Valence_C[artists$artist_name == "Beyonce"]
# t-test is a method for comparing two groups. In this test, I will perform the t-test between Taylor Swift and John Legend for example.
# t-test for Taylor Swift and John Legend
t_test_result_v <- t.test(ts_valence_c, jl_valence_c)
ts_valence_c
jl_valence_c
by_valence_c
ts_valence_c <- as.data.frame(ts_valence_c)
jl_valence_c <- as.data.frame(jl_valence_c)
by_valence_c <- as.data.frame(by_valence_c)
ts_valence_c
jl_valence_c
by_valence_c
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
ts_valence_c <- as.data.frame(ts_valence_c)
jl_valence_c <- as.data.frame(jl_valence_c)
t_test_result_v <- t.test(ts_valence_c, jl_valence_c)
df <- rbind(ts_valence_c, jl_valence_c)
ts_valence_c <- as.data.frame(ts_valence_c)
jl_valence_c <- as.data.frame(jl_valence_c)
View(jl_valence_c)
View(jl_valence_c)
View(ts_valence_c)
View(ts_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
# Combine the counts into a matrix
data_matrix <- rbind(taylor_swift_counts, john_legend_counts, beyonce_counts)
# Combine the counts into a matrix
data_matrix <- rbind(ts_valence_c, jl_valence_c)
View(by_valence_c)
# Combine the counts into a matrix
df <- rbind(ts_valence_c, jl_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
df
df <- rbind(ts_valence_c, jl_valence_c)
df
df <- rbind(ts_valence_c, jl_valence_c)
df
ts_valence_c
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(1, 2, 3))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(1, 2, 3))
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
t_test_result <- t.test(ts_valence_c, jl_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
ts_valence_c <- as.numeric(ts_valence_c)
jl_valence_c <- as.numeric(jl_valence_c)
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
t_test_result <- t.test(ts_valence_c, jl_valence_c)
t_test_result
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c
jl_valence_c
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
ts_valence_c <- as.numeric(ts_valence_c)
jl_valence_c <- as.numeric(jl_valence_c)
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
View(t_speechiness)
View(t_speechiness)
ts_speechiness
ts_speechiness <- artists$speechiness[artists$artist_name == 'Taylor Swift']
jl_speechiness <- artists$speechiness[artists$artist_name == 'John Legend']
t_test_result <- t.test(ts_speechiness, jl_speechiness, alternative = 'greater')
t_test_result
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('Valence','Valence_c')]
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('Valence','Valence_C')]
ts_data
df <- rbind(ts_data$Valence_C, jl_data$Valence_C)
jl_data <- artists[artists$artist_name == 'John Legned', c('Valence','Valence_C')]
df <- rbind(ts_data$Valence_C, jl_data$Valence_C)
chi_square_test <- chisq.test(df)
View(ts_data)
View(ts_data)
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('artist_name','Valence','Valence_C')]
jl_data <- artists[artists$artist_name == 'John Legned', c('artist_name','Valence','Valence_C')]
lung_cancer <- matrix(c(20, 30, 10, 40), nrow = 2, byrow = TRUE)
colnames(lung_cancer) <- c("Smoker", "Non-smoker")
rownames(lung_cancer) <- c("Yes", "No")
# Displaying the contingency table
lung_cancer
table(ts_data)
ts_data
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('artist_name','Valence_C')]
jl_data <- artists[artists$artist_name == 'John Legned', c('artist_name','Valence_C')]
ts_data
df <- as.data.frame(rbind(ts_data, jl_data))
View(df)
View(df)
table(df)
View(jl_data)
View(jl_data)
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('artist_name','Valence_C')]
jl_data <- artists[artists$artist_name == 'John Legend', c('artist_name','Valence_C')]
View(jl_data)
View(jl_data)
df <- as.data.frame(rbind(ts_data, jl_data))
table(df)
chi_square_test <- chisq.test(df)
View(df)
View(df)
test <- table(df)
chi_square_test <- chisq.test(test)
print(chi_square_test)
valence_count <- table(df)
chi_square_test <- chisq.test(valence_count)
print(chi_square_test)
ts_valence_c <- factor(ts_data$Valence_C, levels = c("more negative", "moderate", "more positive"), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_data$Valence_C, levels = c("more negative", "moderate", "more positive"), labels = c(-1, 0, 1))
ts_valence_c <- as.numeric(ts_valence_c)
jl_valence_c <- as.numeric(jl_valence_c)
t_test_result <- t.test(ts_valence_c, jl_valence_c)
t_test_result
