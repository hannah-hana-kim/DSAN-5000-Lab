geom_boxplot() +ggtitle("Speechiness of the artists")
# density plot
t_speechiness<- density(taylor$speechiness)
plot(t_speechiness, frame = FALSE, col = "blue",main = "Density plot of Taylor Swift Speechiness")
j_speechiness<- density(legend$speechiness)
plot(j_speechiness, frame = FALSE, col = "blue",main = "Density plot of John Legend Speechiness")
# QQ plot
qqnorm(taylor$speechiness)
qqline(taylor$speechiness)
qqnorm(legend$speechiness)
qqline(legend$speechiness)
ts_speechiness <- artists$speechiness[artists$artist_name == "Taylor Swift"]
jl_speechiness <- artists$speechiness[artists$artist_name == "John Legend"]
t_test_result <- t.test(ts_speechiness, jl_speechiness, alternative = "greater")
t_test_result
ratio <- mean(ts_speechiness) / mean(jl_speechiness)
ratio
bootstrap <- function(ts, jl, n = 1000) {
ratios <- numeric(n)
for (i in 1:n) {
sample1 <- sample(ts, replace = TRUE)
sample2 <- sample(jl, replace = TRUE)
ratios[i] <- mean(sample1) / mean(sample2)
}
return(ratios)
}
set.seed(123)
bootstrap_ratio <- bootstrap(ts_speechiness, jl_speechiness)
# 95% bootstrap interval
bootstrap_interval <- quantile(bootstrap_ratios, c(0.025, 0.975))
bootstrap <- function(ts, jl, n = 1000) {
ratios <- numeric(n)
for (i in 1:n) {
sample1 <- sample(ts, replace = TRUE)
sample2 <- sample(jl, replace = TRUE)
ratios[i] <- mean(sample1) / mean(sample2)
}
return(ratios)
}
set.seed(123)
bootstrap_ratio <- bootstrap(ts_speechiness, jl_speechiness)
# 95% bootstrap interval
bootstrap_interval <- quantile(bootstrap_ratio, c(0.025, 0.975))
bootstrap_interval
bias <- mean(bootstrap_ratio) - ratio
bias
View(artists)
View(artists)
artists$Valence_C <- "moderate"
artists$Valence_C[artists$Valence >= 0.8,] <- "more positive"
artists$Valence_C <- "moderate"
artists$Valence_C[artists$Valence >= 0.8] <- "more positive"
artists$Valence_C[artists$Valence >= 0.79 & artists$Valence <= 0.5] <- "moderate"
artists$Valence_C[artists$Valence < 0.5] <- "more negative"
head(artists)
head(artists$Valence, artists$Valence_C)
head(artists[Valence,Valence_C])
head(artists[artists$Valence,artists$Valence_C])
head(artists[artists$Valence,artists$Valence_C,])
head(artists[c("Valence","Valence_C")])
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
by_valence_c <- artists$Valence_C[artists$artist_name == "Beyonce"]
# t-test is a method for comparing two groups. In this test, I will perform the t-test between Taylor Swift and John Legend for example.
# t-test for Taylor Swift and Beyonce
t_test_result_v <- t.test(ts_valence_c, by_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
by_valence_c <- artists$Valence_C[artists$artist_name == "Beyonce"]
# t-test is a method for comparing two groups. In this test, I will perform the t-test between Taylor Swift and John Legend for example.
# t-test for Taylor Swift and Beyonce
t_test_result_v <- t.test(ts_valence_c, by_valence_c, alternative='greater')
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
by_valence_c <- artists$Valence_C[artists$artist_name == "Beyonce"]
# t-test is a method for comparing two groups. In this test, I will perform the t-test between Taylor Swift and John Legend for example.
# t-test for Taylor Swift and John Legend
t_test_result_v <- t.test(ts_valence_c, jl_valence_c)
ts_valence_c
jl_valence_c
by_valence_c
ts_valence_c <- as.data.frame(ts_valence_c)
jl_valence_c <- as.data.frame(jl_valence_c)
by_valence_c <- as.data.frame(by_valence_c)
ts_valence_c
jl_valence_c
by_valence_c
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
ts_valence_c <- as.data.frame(ts_valence_c)
jl_valence_c <- as.data.frame(jl_valence_c)
t_test_result_v <- t.test(ts_valence_c, jl_valence_c)
df <- rbind(ts_valence_c, jl_valence_c)
ts_valence_c <- as.data.frame(ts_valence_c)
jl_valence_c <- as.data.frame(jl_valence_c)
View(jl_valence_c)
View(jl_valence_c)
View(ts_valence_c)
View(ts_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
# Combine the counts into a matrix
data_matrix <- rbind(taylor_swift_counts, john_legend_counts, beyonce_counts)
# Combine the counts into a matrix
data_matrix <- rbind(ts_valence_c, jl_valence_c)
View(by_valence_c)
# Combine the counts into a matrix
df <- rbind(ts_valence_c, jl_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == "Taylor Swift"]
jl_valence_c <- artists$Valence_C[artists$artist_name == "John Legend"]
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
df
df <- rbind(ts_valence_c, jl_valence_c)
df
df <- rbind(ts_valence_c, jl_valence_c)
df
ts_valence_c
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(1, 2, 3))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(1, 2, 3))
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
t_test_result <- t.test(ts_valence_c, jl_valence_c)
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
ts_valence_c <- as.numeric(ts_valence_c)
jl_valence_c <- as.numeric(jl_valence_c)
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
t_test_result <- t.test(ts_valence_c, jl_valence_c)
t_test_result
ts_valence_c <- artists$Valence_C[artists$artist_name == 'Taylor Swift']
jl_valence_c <- artists$Valence_C[artists$artist_name == 'John Legend']
ts_valence_c
jl_valence_c
ts_valence_c <- factor(ts_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_valence_c, levels=c('more negative', 'moderate', 'more positive'), labels = c(-1, 0, 1))
ts_valence_c <- as.numeric(ts_valence_c)
jl_valence_c <- as.numeric(jl_valence_c)
df <- rbind(ts_valence_c, jl_valence_c)
chi_square_test <- chisq.test(df)
print(chi_square_test)
View(t_speechiness)
View(t_speechiness)
ts_speechiness
ts_speechiness <- artists$speechiness[artists$artist_name == 'Taylor Swift']
jl_speechiness <- artists$speechiness[artists$artist_name == 'John Legend']
t_test_result <- t.test(ts_speechiness, jl_speechiness, alternative = 'greater')
t_test_result
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('Valence','Valence_c')]
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('Valence','Valence_C')]
ts_data
df <- rbind(ts_data$Valence_C, jl_data$Valence_C)
jl_data <- artists[artists$artist_name == 'John Legned', c('Valence','Valence_C')]
df <- rbind(ts_data$Valence_C, jl_data$Valence_C)
chi_square_test <- chisq.test(df)
View(ts_data)
View(ts_data)
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('artist_name','Valence','Valence_C')]
jl_data <- artists[artists$artist_name == 'John Legned', c('artist_name','Valence','Valence_C')]
lung_cancer <- matrix(c(20, 30, 10, 40), nrow = 2, byrow = TRUE)
colnames(lung_cancer) <- c("Smoker", "Non-smoker")
rownames(lung_cancer) <- c("Yes", "No")
# Displaying the contingency table
lung_cancer
table(ts_data)
ts_data
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('artist_name','Valence_C')]
jl_data <- artists[artists$artist_name == 'John Legned', c('artist_name','Valence_C')]
ts_data
df <- as.data.frame(rbind(ts_data, jl_data))
View(df)
View(df)
table(df)
View(jl_data)
View(jl_data)
ts_data <- artists[artists$artist_name == 'Taylor Swift', c('artist_name','Valence_C')]
jl_data <- artists[artists$artist_name == 'John Legend', c('artist_name','Valence_C')]
View(jl_data)
View(jl_data)
df <- as.data.frame(rbind(ts_data, jl_data))
table(df)
chi_square_test <- chisq.test(df)
View(df)
View(df)
test <- table(df)
chi_square_test <- chisq.test(test)
print(chi_square_test)
valence_count <- table(df)
chi_square_test <- chisq.test(valence_count)
print(chi_square_test)
ts_valence_c <- factor(ts_data$Valence_C, levels = c("more negative", "moderate", "more positive"), labels = c(-1, 0, 1))
jl_valence_c <- factor(jl_data$Valence_C, levels = c("more negative", "moderate", "more positive"), labels = c(-1, 0, 1))
ts_valence_c <- as.numeric(ts_valence_c)
jl_valence_c <- as.numeric(jl_valence_c)
t_test_result <- t.test(ts_valence_c, jl_valence_c)
t_test_result
install.packages("readline")
q()
library(tidyverse)
library(ggplot2)
kc <- read_csv('./Kelly_Clarkson.csv')
ag <- read_csv('./Arianna_Grande.csv')
kc_tempo <- kc$kc.tempo
ag_tempo <- ag$ag.tempo
# histogram
hist(kc_tempo)
hist(ag_tempo)
# boxplot
kc %>%
ggplot(aes(x = kc.artist_name, y = kc.tempo)) +
geom_boxplot() +ggtitle("Tempo of the songs from Kelly Clarkson")
ag %>%
ggplot(aes(x = ag.artist_name, y = ag.tempo)) +
geom_boxplot() +ggtitle("Tempo of the songs from Arianna Grande")
# density plot
kc_density<- density(kc_tempo)
plot(kc_density, frame = FALSE, col = "blue",main = "Density plot of Kelly Clarkson's song tempo")
ag_density <- density(ag_tempo)
plot(ag_density, frame = FALSE, col = "blue",main = "Density plot of Arianna Grande's song tempo")
# QQ plot
qqnorm(kc_tempo)
qqline(kc_tempo)
qqnorm(ag_tempo)
qqline(ag_tempo)
# bar plot of the average value
kc_mean <- mean(kc_tempo)
ag_mean <- mean(ag_tempo)
barplot(c(kc_mean, ag_mean),
names.arg = c("Kelly Clarkson", "Arianna Grande"),
col = c("lightblue", "pink"),
ylim = c(0, max(kc_mean, ag_mean) * 1.2),
main = "Comparison of the Mean Values",
xlab = "Artists",
ylab = "Mean Value")
t_test_result <- t.test(kc_tempo, ag_tempo, alternative = 'greater')
t_test_result
set.seed(123)
n = 10000
for (i in 1:n) {
sample1 <- sample(kc_tempo, length(kc_tempo), replace = TRUE)
sample2 <- sample(ag_tempo, length(ag_tempo), replace = TRUE)
diff[i] <- (mean(sample1) - mean(sample2))
}
set.seed(123)
n = 10000
for (i in 1:n) {
sample1 <- sample(kc_tempo, length(kc_tempo), replace = TRUE)
sample2 <- sample(ag_tempo, length(ag_tempo), replace = TRUE)
diff[i] <- mean(sample1) - mean(sample2)
}
set.seed(123)
n = 10000
diff <- numeric(n)
for (i in 1:n) {
sample1 <- sample(kc_tempo, length(kc_tempo), replace = TRUE)
sample2 <- sample(ag_tempo, length(ag_tempo), replace = TRUE)
diff[i] <- mean(sample1) - mean(sample2)
}
# 95% bootstrap interval
bootstrap_interval <- quantile(diff, c(0.025, 0.975))
bootstrap_interval
bias <- mean(diff) - real_diff
read_diff <- mean(kc_tempo) - mean(ag_tempo)
set.seed(123)
n = 10000
diff <- numeric(n)
for (i in 1:n) {
sample1 <- sample(kc_tempo, length(kc_tempo), replace = TRUE)
sample2 <- sample(ag_tempo, length(ag_tempo), replace = TRUE)
diff[i] <- mean(sample1) - mean(sample2)
}
# 95% bootstrap interval
bootstrap_interval <- quantile(diff, c(0.025, 0.975))
bootstrap_interval
bias <- mean(diff) - real_diff
read_diff <- mean(kc_tempo) - mean(ag_tempo)
real_diff <- mean(kc_tempo) - mean(ag_tempo)
set.seed(123)
n = 10000
diff <- numeric(n)
for (i in 1:n) {
sample1 <- sample(kc_tempo, length(kc_tempo), replace = TRUE)
sample2 <- sample(ag_tempo, length(ag_tempo), replace = TRUE)
diff[i] <- mean(sample1) - mean(sample2)
}
# 95% bootstrap interval
bootstrap_interval <- quantile(diff, c(0.025, 0.975))
bootstrap_interval
bias <- mean(diff) - real_diff
bias
diff_of_means <- numeric(100000)
for (i in 1:100000) {
sample_kelly <- sample(kc$kc.tempo, length(kc), replace = TRUE)
sample_arianna <- sample(ag$ag.tempo, length(ag), replace = TRUE)
diff_of_means[i] <- mean(sample_kelly) - mean(sample_arianna)
}
kelly_mean <- mean(kc$kc.tempo)
ariana_mean <- mean(ag$ag.tempo)
real_diff <- mean(kc_tempo) - mean(ag_tempo)
interval <- quantile(diff_of_means, c(0.025, 0.975))
interval
bias <- diff_of_means - real_diff
bias
diff_of_means <- numeric(100000)
for (i in 1:100000) {
sample_kelly <- sample(kc$kc.tempo, length(kc), replace = TRUE)
sample_arianna <- sample(ag$ag.tempo, length(ag), replace = TRUE)
diff_of_means[i] <- mean(sample_kelly) - mean(sample_arianna)
}
kelly_mean <- mean(kc$kc.tempo)
ariana_mean <- mean(ag$ag.tempo)
real_diff <- mean(kc_tempo) - mean(ag_tempo)
interval <- quantile(diff_of_means, c(0.025, 0.975))
interval
bias <- mean(diff_of_means) - real_diff
bias
diff_of_means <- numeric(100000)
for (i in 1:100000) {
sample_kelly <- sample(kc$kc.tempo, length(kc), replace = TRUE)
sample_arianna <- sample(ag$ag.tempo, length(ag), replace = TRUE)
diff_of_means[i] <- mean(sample_kelly) - mean(sample_arianna)
}
kelly_mean <- mean(kc$kc.tempo)
ariana_mean <- mean(ag$ag.tempo)
real_diff <- mean(kc_tempo) - mean(ag_tempo)
interval <- quantile(diff_of_means, c(0.025, 0.975))
interval
bias <- mean(diff_of_means) - real_diff
bias
ggplot() +
geom_histogram(aes(x = diff_of_means), binwidth = 1, fill = "burlywood1", color = "black") +
labs(title = "Difference of Means (Kelly Clarkson - Ariana Grande)", x = "Difference of Means", y = "Frequency") +
geom_vline(xintercept = real_difference, col = "red", linetype = "dashed") +
geom_vline(xintercept = interval, col = "blue", linetype = "dashed") +
theme_minimal()
ggplot() +
geom_histogram(aes(x = diff_of_means), binwidth = 1, fill = "burlywood1", color = "black") +
labs(title = "Difference of Means (Kelly Clarkson - Ariana Grande)", x = "Difference of Means", y = "Frequency") +
geom_vline(xintercept = real_diff, col = "red", linetype = "dashed") +
geom_vline(xintercept = interval, col = "blue", linetype = "dashed") +
theme_minimal()
ggplot() +
geom_histogram(aes(x = diff_of_means), binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Difference of Means", x = "Difference of Means", y = "Frequency") +
geom_vline(xintercept = real_diff, col = "red", linetype = "dashed") +
geom_vline(xintercept = interval, col = "blue", linetype = "dashed") +
theme_minimal()
# load the data
hate_crime <- read_csv('./HateCrime.csv')
# head(hate_crime)
known <- grep("Known", names(hate_crime), value = TRUE)
crime_against_indices <- c(1, 3, 10, 18)
df <- hate_crime[crime_against_indices, known]
row_names <- c("Offense Type", "Crimes against persons", "Crimes against property", "Crimes against society")
row.names(df) <- row_names
df <- df[,-1:-6]
row_1 <- as.character(df[1, ]) # ethnicity
row_2_4 <- as.matrix(df[2:4, ]) # count of hate crimes
row_2_4 <- as.numeric(row_2_4)
# str(row_2_4)
mat <- matrix(row_2_4, nrow=3, byrow = FALSE)
new_df <- data.frame(mat)
colnames(new_df) <- row_1
row_names_2 <- c("Crimes against persons", "Crimes against property", "Crimes against society")
row.names(new_df) <- row_names_2
colnames(new_df) <- gsub(" ", "_", colnames(new_df))
colnames(new_df) <- gsub("\n", "_", colnames(new_df))
dm <- as.matrix(new_df)
colors <- c('lightblue', 'pink', 'lightgreen')
# row.names(dm)
bp <- barplot(dm, beside = TRUE, col = colors,
main = "Bar Graph of the counts based on the Offense Type",
xlab = "Ethnicity", ylab = "Count",
las = 3, cex.axis = 1, cex.lab = 1)
legend("topright", legend = row.names(dm), fill = colors, title = "Offense Type")
first_row <- head(new_df, 1)
melted_first_row <- melt(first_row)
library(reshape2)
first_row <- head(new_df, 1)
melted_first_row <- melt(first_row)
ggplot(melted_first_row, aes(x = variable, y = value, fill = "Offense_Type")) +
geom_bar(stat = "identity") +
labs(title = "Crimes against persons", x = "", y = "Frequency") +
scale_fill_manual(values = c("lightblue")) +
theme_minimal() +
guides(fill = FALSE)
sec_row <- new_df[2,]
melted_sec_row <- melt(sec_row)
ggplot(melted_sec_row, aes(x = variable, y = value, fill = "Offense_Type")) +
geom_bar(stat = "identity") +
labs(title = "Crimes against property", x = "", y = "Frequency") +
scale_fill_manual(values = c("pink")) +
theme_minimal() +
guides(fill = FALSE)
third_row <- new_df[3,]
melted_third_row <- melt(third_row)
ggplot(melted_third_row, aes(x = variable, y = value, fill = "Offense_Type")) +
geom_bar(stat = "identity") +
labs(title = "Crimes against society", x = "", y = "Frequency") +
scale_fill_manual(values = c("lightgreen")) +
theme_minimal() +
guides(fill = FALSE)
library(tidyverse)
library(dplyr)
new_df
melt_data <- melt(new_df)
print(melt_data)
library(tidyr)
# Sample data
data <- data.frame(
Hispanic_or_Latino = c(509, 94, 5),
Not_Hispanic_or_Latino = c(2150, 362, 113),
Group_of_multiple_ethnicities = c(52, 15, 2),
row.names = c("Crimes against persons", "Crimes against property", "Crimes against society")
)
# Add row names as a column and convert them into a new column
data$Offense_Type <- row.names(data)
data <- data.frame(data, row.names = NULL)
# Reshape data from wide to long format
melted_data <- gather(data, key = "Ethnicity", value = "Count", -Offense_Type)
View(melted_data)
View(data)
man_data <- data.frame(
Hispanic_or_Latino = c(509, 94, 5),
Not_Hispanic_or_Latino = c(2150, 362, 113),
Group_of_multiple_ethnicities = c(52, 15, 2),
row.names = c("Crimes against persons", "Crimes against property", "Crimes against society")
)
man_data$Offense_Type <- row.names(man_data)
man_data <- data.frame(man_data, row.names = NULL)
melt_data <- gather(man_data, key = "Ethnicity", value = "Count", -Offense_Type)
chi_squared_result <- chisq.test(table(melt_data$Offense_type, melt_data$Ethnicity))
View(melt_data)
chi_squared_result <- chisq.test(table(melt_data$Offense_Type, melt_data$Ethnicity))
print(chi_squared_result)
melt_data <- gather(man_data, key = "Ethnicity", value = "Count", -Offense_Type)
melt_data
t <- table(melt_data$Offense_Type, melt_data$Ethnicity)
t
chi_squared_result <- chisq.test(melt_data$Offense_Type, melt_data$Ethnicity)
print(chi_squared_result)
melted_data <- man_data %>%
gather(key = "Ethnicity", value = "Count", -Offense_type) %>%
slice(rep(1:n(), times = .$Count)) %>%
select(-Count)
melted_data <- man_data %>%
gather(key = "Ethnicity", value = "Count", -Offense_Type) %>%
slice(rep(1:n(), times = .$Count)) %>%
select(-Count)
View(melted_data)
View(melted_data)
View(melted_first_row)
View(melted_sec_row)
View(melted_data)
View(melt_data)
chi_squared_result <- chisq.test(table(melted_data$Offense_type, melted_data$Ethnicity))
chi_squared_result <- chisq.test(table(melted_data$Offense_Type, melted_data$Ethnicity))
print(chi_squared_result)
# chi-squared test
library(tidyverse)
library(dplyr)
library(tidyr)
# manually create a data frame for melting
man_data <- data.frame(
Hispanic_or_Latino = c(509, 94, 5),
Not_Hispanic_or_Latino = c(2150, 362, 113),
Group_of_multiple_ethnicities = c(52, 15, 2),
row.names = c("Crimes against persons", "Crimes against property", "Crimes against society")
)
man_data$Offense_Type <- row.names(man_data)
man_data <- data.frame(man_data, row.names = NULL)
melted_data <- man_data %>%
gather(key = "Ethnicity", value = "Count", -Offense_Type) %>%
slice(rep(1:n(), times = .$Count)) %>%
select(-Count)
# chi-squared test
chi_squared_result <- chisq.test(table(melted_data$Offense_Type, melted_data$Ethnicity))
print(chi_squared_result)
# chi-squared test
library(tidyverse)
library(dplyr)
library(tidyr)
# manually create a data frame for melting
man_data <- data.frame(
Hispanic_or_Latino = c(509, 94, 5),
Not_Hispanic_or_Latino = c(2150, 362, 113),
Group_of_multiple_ethnicities = c(52, 15, 2),
row.names = c("Crimes against persons", "Crimes against property", "Crimes against society")
)
man_data$Offense_Type <- row.names(man_data)
man_data <- data.frame(man_data, row.names = NULL)
melt_data <- man_data %>%
gather(key = "Ethnicity", value = "Count", -Offense_Type) %>%
slice(rep(1:n(), times = .$Count)) %>%
select(-Count)
# chi-squared test
chi_squared_result <- chisq.test(table(melt_data$Offense_Type, melt_data$Ethnicity))
print(chi_squared_result)
